// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/pietroski-software-company/tools/serializer/go-serializer/internal/mocks/proto (interfaces: ProtoReflectProtoMessage)
//
// Generated by this command:
//
//	mockgen -package go_mocked_proto -destination ../../internal/mocks/proto/mocks/mocked_proto_reflect_proto_message.go gitlab.com/pietroski-software-company/tools/serializer/go-serializer/internal/mocks/proto ProtoReflectProtoMessage
//

// Package go_mocked_proto is a generated GoMock package.
package go_mocked_proto

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
)

// MockProtoReflectProtoMessage is a mock of ProtoReflectProtoMessage interface.
type MockProtoReflectProtoMessage struct {
	ctrl     *gomock.Controller
	recorder *MockProtoReflectProtoMessageMockRecorder
}

// MockProtoReflectProtoMessageMockRecorder is the mock recorder for MockProtoReflectProtoMessage.
type MockProtoReflectProtoMessageMockRecorder struct {
	mock *MockProtoReflectProtoMessage
}

// NewMockProtoReflectProtoMessage creates a new mock instance.
func NewMockProtoReflectProtoMessage(ctrl *gomock.Controller) *MockProtoReflectProtoMessage {
	mock := &MockProtoReflectProtoMessage{ctrl: ctrl}
	mock.recorder = &MockProtoReflectProtoMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProtoReflectProtoMessage) EXPECT() *MockProtoReflectProtoMessageMockRecorder {
	return m.recorder
}

// ProtoReflect mocks base method.
func (m *MockProtoReflectProtoMessage) ProtoReflect() protoreflect.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProtoReflect")
	ret0, _ := ret[0].(protoreflect.Message)
	return ret0
}

// ProtoReflect indicates an expected call of ProtoReflect.
func (mr *MockProtoReflectProtoMessageMockRecorder) ProtoReflect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoReflect", reflect.TypeOf((*MockProtoReflectProtoMessage)(nil).ProtoReflect))
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.0
// source: item/item.messages.proto

package grpc_item

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date     int64  `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	Amount   int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	ItemCode string `protobuf:"bytes,3,opt,name=itemCode,proto3" json:"itemCode,omitempty"`
}

func (x *SubItem) Reset() {
	*x = SubItem{}
	mi := &file_item_item_messages_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubItem) ProtoMessage() {}

func (x *SubItem) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubItem.ProtoReflect.Descriptor instead.
func (*SubItem) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{0}
}

func (x *SubItem) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *SubItem) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SubItem) GetItemCode() string {
	if x != nil {
		return x.ItemCode
	}
	return ""
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemId  uint64   `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Number  int64    `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	SubItem *SubItem `protobuf:"bytes,6,opt,name=subItem,proto3" json:"subItem,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	mi := &file_item_item_messages_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{1}
}

func (x *Item) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Item) GetItemId() uint64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *Item) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *Item) GetSubItem() *SubItem {
	if x != nil {
		return x.SubItem
	}
	return nil
}

type AnotherSubItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Date     int64  `protobuf:"varint,1,opt,name=date,proto3" json:"date,omitempty"`
	Amount   int64  `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
	ItemCode string `protobuf:"bytes,3,opt,name=itemCode,proto3" json:"itemCode,omitempty"`
}

func (x *AnotherSubItem) Reset() {
	*x = AnotherSubItem{}
	mi := &file_item_item_messages_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnotherSubItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnotherSubItem) ProtoMessage() {}

func (x *AnotherSubItem) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnotherSubItem.ProtoReflect.Descriptor instead.
func (*AnotherSubItem) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{2}
}

func (x *AnotherSubItem) GetDate() int64 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *AnotherSubItem) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *AnotherSubItem) GetItemCode() string {
	if x != nil {
		return x.ItemCode
	}
	return ""
}

type AnotherItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ItemId  uint64          `protobuf:"varint,2,opt,name=itemId,proto3" json:"itemId,omitempty"`
	Number  int64           `protobuf:"varint,3,opt,name=number,proto3" json:"number,omitempty"`
	SubItem *AnotherSubItem `protobuf:"bytes,6,opt,name=subItem,proto3" json:"subItem,omitempty"`
}

func (x *AnotherItem) Reset() {
	*x = AnotherItem{}
	mi := &file_item_item_messages_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnotherItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnotherItem) ProtoMessage() {}

func (x *AnotherItem) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnotherItem.ProtoReflect.Descriptor instead.
func (*AnotherItem) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{3}
}

func (x *AnotherItem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *AnotherItem) GetItemId() uint64 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *AnotherItem) GetNumber() int64 {
	if x != nil {
		return x.Number
	}
	return 0
}

func (x *AnotherItem) GetSubItem() *AnotherSubItem {
	if x != nil {
		return x.SubItem
	}
	return nil
}

type SliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int64List         []int64      `protobuf:"varint,1,rep,packed,name=int64_list,json=int64List,proto3" json:"int64_list,omitempty"`
	Uint64List        []uint64     `protobuf:"varint,2,rep,packed,name=uint64_list,json=uint64List,proto3" json:"uint64_list,omitempty"`
	StringList        []string     `protobuf:"bytes,3,rep,name=string_list,json=stringList,proto3" json:"string_list,omitempty"`
	StructList        []*SliceItem `protobuf:"bytes,4,rep,name=struct_list,json=structList,proto3" json:"struct_list,omitempty"`
	StructNilList     []*SliceItem `protobuf:"bytes,5,rep,name=struct_nil_list,json=structNilList,proto3" json:"struct_nil_list,omitempty"`
	RepeatedBytesList [][]byte     `protobuf:"bytes,6,rep,name=repeated_bytes_list,json=repeatedBytesList,proto3" json:"repeated_bytes_list,omitempty"`
	BytesList         []byte       `protobuf:"bytes,7,opt,name=bytes_list,json=bytesList,proto3" json:"bytes_list,omitempty"`
}

func (x *SliceTestData) Reset() {
	*x = SliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceTestData) ProtoMessage() {}

func (x *SliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceTestData.ProtoReflect.Descriptor instead.
func (*SliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{4}
}

func (x *SliceTestData) GetInt64List() []int64 {
	if x != nil {
		return x.Int64List
	}
	return nil
}

func (x *SliceTestData) GetUint64List() []uint64 {
	if x != nil {
		return x.Uint64List
	}
	return nil
}

func (x *SliceTestData) GetStringList() []string {
	if x != nil {
		return x.StringList
	}
	return nil
}

func (x *SliceTestData) GetStructList() []*SliceItem {
	if x != nil {
		return x.StructList
	}
	return nil
}

func (x *SliceTestData) GetStructNilList() []*SliceItem {
	if x != nil {
		return x.StructNilList
	}
	return nil
}

func (x *SliceTestData) GetRepeatedBytesList() [][]byte {
	if x != nil {
		return x.RepeatedBytesList
	}
	return nil
}

func (x *SliceTestData) GetBytesList() []byte {
	if x != nil {
		return x.BytesList
	}
	return nil
}

type SliceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int  int64  `protobuf:"varint,1,opt,name=int,proto3" json:"int,omitempty"`
	Str  string `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	Bool bool   `protobuf:"varint,3,opt,name=bool,proto3" json:"bool,omitempty"`
}

func (x *SliceItem) Reset() {
	*x = SliceItem{}
	mi := &file_item_item_messages_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SliceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SliceItem) ProtoMessage() {}

func (x *SliceItem) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SliceItem.ProtoReflect.Descriptor instead.
func (*SliceItem) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{5}
}

func (x *SliceItem) GetInt() int64 {
	if x != nil {
		return x.Int
	}
	return 0
}

func (x *SliceItem) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *SliceItem) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

type MapTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int64KeyMapInt64Value map[int64]int64   `protobuf:"bytes,1,rep,name=int64_key_map_int64_value,json=int64KeyMapInt64Value,proto3" json:"int64_key_map_int64_value,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	StrKeyMapStrValue     map[string]string `protobuf:"bytes,2,rep,name=str_key_map_str_value,json=strKeyMapStrValue,proto3" json:"str_key_map_str_value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapTestData) Reset() {
	*x = MapTestData{}
	mi := &file_item_item_messages_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapTestData) ProtoMessage() {}

func (x *MapTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapTestData.ProtoReflect.Descriptor instead.
func (*MapTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{6}
}

func (x *MapTestData) GetInt64KeyMapInt64Value() map[int64]int64 {
	if x != nil {
		return x.Int64KeyMapInt64Value
	}
	return nil
}

func (x *MapTestData) GetStrKeyMapStrValue() map[string]string {
	if x != nil {
		return x.StrKeyMapStrValue
	}
	return nil
}

type Int64SliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int64List []int64 `protobuf:"varint,1,rep,packed,name=int64_list,json=int64List,proto3" json:"int64_list,omitempty"`
}

func (x *Int64SliceTestData) Reset() {
	*x = Int64SliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64SliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64SliceTestData) ProtoMessage() {}

func (x *Int64SliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64SliceTestData.ProtoReflect.Descriptor instead.
func (*Int64SliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{7}
}

func (x *Int64SliceTestData) GetInt64List() []int64 {
	if x != nil {
		return x.Int64List
	}
	return nil
}

type Int32SliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32List []int32 `protobuf:"varint,1,rep,packed,name=int32_list,json=int32List,proto3" json:"int32_list,omitempty"`
}

func (x *Int32SliceTestData) Reset() {
	*x = Int32SliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32SliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32SliceTestData) ProtoMessage() {}

func (x *Int32SliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32SliceTestData.ProtoReflect.Descriptor instead.
func (*Int32SliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{8}
}

func (x *Int32SliceTestData) GetInt32List() []int32 {
	if x != nil {
		return x.Int32List
	}
	return nil
}

type Uint64SliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64List []uint64 `protobuf:"varint,1,rep,packed,name=uint64_list,json=uint64List,proto3" json:"uint64_list,omitempty"`
}

func (x *Uint64SliceTestData) Reset() {
	*x = Uint64SliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint64SliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64SliceTestData) ProtoMessage() {}

func (x *Uint64SliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64SliceTestData.ProtoReflect.Descriptor instead.
func (*Uint64SliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{9}
}

func (x *Uint64SliceTestData) GetUint64List() []uint64 {
	if x != nil {
		return x.Uint64List
	}
	return nil
}

type Uint32SliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32List []uint32 `protobuf:"varint,1,rep,packed,name=uint32_list,json=uint32List,proto3" json:"uint32_list,omitempty"`
}

func (x *Uint32SliceTestData) Reset() {
	*x = Uint32SliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Uint32SliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32SliceTestData) ProtoMessage() {}

func (x *Uint32SliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32SliceTestData.ProtoReflect.Descriptor instead.
func (*Uint32SliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{10}
}

func (x *Uint32SliceTestData) GetUint32List() []uint32 {
	if x != nil {
		return x.Uint32List
	}
	return nil
}

type Float64SliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Float64List []float64 `protobuf:"fixed64,1,rep,packed,name=float64_list,json=float64List,proto3" json:"float64_list,omitempty"`
}

func (x *Float64SliceTestData) Reset() {
	*x = Float64SliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Float64SliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float64SliceTestData) ProtoMessage() {}

func (x *Float64SliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float64SliceTestData.ProtoReflect.Descriptor instead.
func (*Float64SliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{11}
}

func (x *Float64SliceTestData) GetFloat64List() []float64 {
	if x != nil {
		return x.Float64List
	}
	return nil
}

type Float32SliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Float32List []float32 `protobuf:"fixed32,1,rep,packed,name=float32_list,json=float32List,proto3" json:"float32_list,omitempty"`
}

func (x *Float32SliceTestData) Reset() {
	*x = Float32SliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Float32SliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Float32SliceTestData) ProtoMessage() {}

func (x *Float32SliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Float32SliceTestData.ProtoReflect.Descriptor instead.
func (*Float32SliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{12}
}

func (x *Float32SliceTestData) GetFloat32List() []float32 {
	if x != nil {
		return x.Float32List
	}
	return nil
}

type ByteSliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteList []byte `protobuf:"bytes,1,opt,name=byte_list,json=byteList,proto3" json:"byte_list,omitempty"`
}

func (x *ByteSliceTestData) Reset() {
	*x = ByteSliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ByteSliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteSliceTestData) ProtoMessage() {}

func (x *ByteSliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteSliceTestData.ProtoReflect.Descriptor instead.
func (*ByteSliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{13}
}

func (x *ByteSliceTestData) GetByteList() []byte {
	if x != nil {
		return x.ByteList
	}
	return nil
}

type ByteByteSliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ByteByteList [][]byte `protobuf:"bytes,1,rep,name=byte_byte_list,json=byteByteList,proto3" json:"byte_byte_list,omitempty"`
}

func (x *ByteByteSliceTestData) Reset() {
	*x = ByteByteSliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ByteByteSliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ByteByteSliceTestData) ProtoMessage() {}

func (x *ByteByteSliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ByteByteSliceTestData.ProtoReflect.Descriptor instead.
func (*ByteByteSliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{14}
}

func (x *ByteByteSliceTestData) GetByteByteList() [][]byte {
	if x != nil {
		return x.ByteByteList
	}
	return nil
}

type StringSliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StringList []string `protobuf:"bytes,1,rep,name=string_list,json=stringList,proto3" json:"string_list,omitempty"`
}

func (x *StringSliceTestData) Reset() {
	*x = StringSliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringSliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringSliceTestData) ProtoMessage() {}

func (x *StringSliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringSliceTestData.ProtoReflect.Descriptor instead.
func (*StringSliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{15}
}

func (x *StringSliceTestData) GetStringList() []string {
	if x != nil {
		return x.StringList
	}
	return nil
}

type StructSliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StructList []*StructTestData `protobuf:"bytes,1,rep,name=struct_list,json=structList,proto3" json:"struct_list,omitempty"`
}

func (x *StructSliceTestData) Reset() {
	*x = StructSliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructSliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructSliceTestData) ProtoMessage() {}

func (x *StructSliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructSliceTestData.ProtoReflect.Descriptor instead.
func (*StructSliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{16}
}

func (x *StructSliceTestData) GetStructList() []*StructTestData {
	if x != nil {
		return x.StructList
	}
	return nil
}

type StructTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool  bool   `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Str   string `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	Int64 int64  `protobuf:"varint,3,opt,name=int64,proto3" json:"int64,omitempty"`
}

func (x *StructTestData) Reset() {
	*x = StructTestData{}
	mi := &file_item_item_messages_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StructTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StructTestData) ProtoMessage() {}

func (x *StructTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StructTestData.ProtoReflect.Descriptor instead.
func (*StructTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{17}
}

func (x *StructTestData) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *StructTestData) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *StructTestData) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

type MapInt64Int64TestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapInt64Int64 map[int64]int64 `protobuf:"bytes,1,rep,name=map_int64_int64,json=mapInt64Int64,proto3" json:"map_int64_int64,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *MapInt64Int64TestData) Reset() {
	*x = MapInt64Int64TestData{}
	mi := &file_item_item_messages_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapInt64Int64TestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64Int64TestData) ProtoMessage() {}

func (x *MapInt64Int64TestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64Int64TestData.ProtoReflect.Descriptor instead.
func (*MapInt64Int64TestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{18}
}

func (x *MapInt64Int64TestData) GetMapInt64Int64() map[int64]int64 {
	if x != nil {
		return x.MapInt64Int64
	}
	return nil
}

type MapStringStringTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapStringString map[string]string `protobuf:"bytes,1,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringStringTestData) Reset() {
	*x = MapStringStringTestData{}
	mi := &file_item_item_messages_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapStringStringTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringStringTestData) ProtoMessage() {}

func (x *MapStringStringTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringStringTestData.ProtoReflect.Descriptor instead.
func (*MapStringStringTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{19}
}

func (x *MapStringStringTestData) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

type MapInt64StructPointerTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapInt64StructPointerTestData map[int64]*StructTestData `protobuf:"bytes,1,rep,name=map_int64_struct_pointer_test_data,json=mapInt64StructPointerTestData,proto3" json:"map_int64_struct_pointer_test_data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapInt64StructPointerTestData) Reset() {
	*x = MapInt64StructPointerTestData{}
	mi := &file_item_item_messages_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapInt64StructPointerTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapInt64StructPointerTestData) ProtoMessage() {}

func (x *MapInt64StructPointerTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapInt64StructPointerTestData.ProtoReflect.Descriptor instead.
func (*MapInt64StructPointerTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{20}
}

func (x *MapInt64StructPointerTestData) GetMapInt64StructPointerTestData() map[int64]*StructTestData {
	if x != nil {
		return x.MapInt64StructPointerTestData
	}
	return nil
}

type MapStringStructPointerTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MapStringStructPointerTestData map[string]*StructTestData `protobuf:"bytes,1,rep,name=map_string_struct_pointer_test_data,json=mapStringStructPointerTestData,proto3" json:"map_string_struct_pointer_test_data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MapStringStructPointerTestData) Reset() {
	*x = MapStringStructPointerTestData{}
	mi := &file_item_item_messages_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapStringStructPointerTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapStringStructPointerTestData) ProtoMessage() {}

func (x *MapStringStructPointerTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapStringStructPointerTestData.ProtoReflect.Descriptor instead.
func (*MapStringStructPointerTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{21}
}

func (x *MapStringStructPointerTestData) GetMapStringStructPointerTestData() map[string]*StructTestData {
	if x != nil {
		return x.MapStringStructPointerTestData
	}
	return nil
}

type SimplifiedSpecialStructTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool          bool     `protobuf:"varint,1,opt,name=bool,proto3" json:"bool,omitempty"`
	Str           string   `protobuf:"bytes,2,opt,name=str,proto3" json:"str,omitempty"`
	Int32         int32    `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Int64         int64    `protobuf:"varint,4,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint32        uint32   `protobuf:"varint,5,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint64        uint64   `protobuf:"varint,6,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Float32       float32  `protobuf:"fixed32,7,opt,name=float32,proto3" json:"float32,omitempty"`
	Float64       float64  `protobuf:"fixed64,8,opt,name=float64,proto3" json:"float64,omitempty"`
	Bytes         []byte   `protobuf:"bytes,9,opt,name=bytes,proto3" json:"bytes,omitempty"`
	RepeatedBytes [][]byte `protobuf:"bytes,10,rep,name=repeated_bytes,json=repeatedBytes,proto3" json:"repeated_bytes,omitempty"`
}

func (x *SimplifiedSpecialStructTestData) Reset() {
	*x = SimplifiedSpecialStructTestData{}
	mi := &file_item_item_messages_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimplifiedSpecialStructTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplifiedSpecialStructTestData) ProtoMessage() {}

func (x *SimplifiedSpecialStructTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplifiedSpecialStructTestData.ProtoReflect.Descriptor instead.
func (*SimplifiedSpecialStructTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{22}
}

func (x *SimplifiedSpecialStructTestData) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *SimplifiedSpecialStructTestData) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

func (x *SimplifiedSpecialStructTestData) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *SimplifiedSpecialStructTestData) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *SimplifiedSpecialStructTestData) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *SimplifiedSpecialStructTestData) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *SimplifiedSpecialStructTestData) GetFloat32() float32 {
	if x != nil {
		return x.Float32
	}
	return 0
}

func (x *SimplifiedSpecialStructTestData) GetFloat64() float64 {
	if x != nil {
		return x.Float64
	}
	return 0
}

func (x *SimplifiedSpecialStructTestData) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *SimplifiedSpecialStructTestData) GetRepeatedBytes() [][]byte {
	if x != nil {
		return x.RepeatedBytes
	}
	return nil
}

type SimplifiedSpecialStructPointerSliceTestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SimplifiedSpecialStructTestData []*SimplifiedSpecialStructTestData `protobuf:"bytes,1,rep,name=simplified_special_struct_test_data,json=simplifiedSpecialStructTestData,proto3" json:"simplified_special_struct_test_data,omitempty"`
}

func (x *SimplifiedSpecialStructPointerSliceTestData) Reset() {
	*x = SimplifiedSpecialStructPointerSliceTestData{}
	mi := &file_item_item_messages_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SimplifiedSpecialStructPointerSliceTestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimplifiedSpecialStructPointerSliceTestData) ProtoMessage() {}

func (x *SimplifiedSpecialStructPointerSliceTestData) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimplifiedSpecialStructPointerSliceTestData.ProtoReflect.Descriptor instead.
func (*SimplifiedSpecialStructPointerSliceTestData) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{23}
}

func (x *SimplifiedSpecialStructPointerSliceTestData) GetSimplifiedSpecialStructTestData() []*SimplifiedSpecialStructTestData {
	if x != nil {
		return x.SimplifiedSpecialStructTestData
	}
	return nil
}

type StringStruct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstString  string `protobuf:"bytes,1,opt,name=first_string,json=firstString,proto3" json:"first_string,omitempty"`
	SecondString string `protobuf:"bytes,2,opt,name=second_string,json=secondString,proto3" json:"second_string,omitempty"`
	ThirdString  string `protobuf:"bytes,3,opt,name=third_string,json=thirdString,proto3" json:"third_string,omitempty"`
	FourthString string `protobuf:"bytes,4,opt,name=fourth_string,json=fourthString,proto3" json:"fourth_string,omitempty"`
	FifthString  string `protobuf:"bytes,5,opt,name=fifth_string,json=fifthString,proto3" json:"fifth_string,omitempty"`
}

func (x *StringStruct) Reset() {
	*x = StringStruct{}
	mi := &file_item_item_messages_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringStruct) ProtoMessage() {}

func (x *StringStruct) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringStruct.ProtoReflect.Descriptor instead.
func (*StringStruct) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{24}
}

func (x *StringStruct) GetFirstString() string {
	if x != nil {
		return x.FirstString
	}
	return ""
}

func (x *StringStruct) GetSecondString() string {
	if x != nil {
		return x.SecondString
	}
	return ""
}

func (x *StringStruct) GetThirdString() string {
	if x != nil {
		return x.ThirdString
	}
	return ""
}

func (x *StringStruct) GetFourthString() string {
	if x != nil {
		return x.FourthString
	}
	return ""
}

func (x *StringStruct) GetFifthString() string {
	if x != nil {
		return x.FifthString
	}
	return ""
}

type Int64Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FirstInt64  int64 `protobuf:"varint,1,opt,name=first_int64,json=firstInt64,proto3" json:"first_int64,omitempty"`
	SecondInt64 int64 `protobuf:"varint,2,opt,name=second_int64,json=secondInt64,proto3" json:"second_int64,omitempty"`
	ThirdInt64  int64 `protobuf:"varint,3,opt,name=third_int64,json=thirdInt64,proto3" json:"third_int64,omitempty"`
	FourthInt64 int64 `protobuf:"varint,4,opt,name=fourth_int64,json=fourthInt64,proto3" json:"fourth_int64,omitempty"`
	FifthInt64  int64 `protobuf:"varint,5,opt,name=fifth_int64,json=fifthInt64,proto3" json:"fifth_int64,omitempty"`
	SixthInt64  int64 `protobuf:"varint,6,opt,name=sixth_int64,json=sixthInt64,proto3" json:"sixth_int64,omitempty"`
}

func (x *Int64Struct) Reset() {
	*x = Int64Struct{}
	mi := &file_item_item_messages_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Struct) ProtoMessage() {}

func (x *Int64Struct) ProtoReflect() protoreflect.Message {
	mi := &file_item_item_messages_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Struct.ProtoReflect.Descriptor instead.
func (*Int64Struct) Descriptor() ([]byte, []int) {
	return file_item_item_messages_proto_rawDescGZIP(), []int{25}
}

func (x *Int64Struct) GetFirstInt64() int64 {
	if x != nil {
		return x.FirstInt64
	}
	return 0
}

func (x *Int64Struct) GetSecondInt64() int64 {
	if x != nil {
		return x.SecondInt64
	}
	return 0
}

func (x *Int64Struct) GetThirdInt64() int64 {
	if x != nil {
		return x.ThirdInt64
	}
	return 0
}

func (x *Int64Struct) GetFourthInt64() int64 {
	if x != nil {
		return x.FourthInt64
	}
	return 0
}

func (x *Int64Struct) GetFifthInt64() int64 {
	if x != nil {
		return x.FifthInt64
	}
	return 0
}

func (x *Int64Struct) GetSixthInt64() int64 {
	if x != nil {
		return x.SixthInt64
	}
	return 0
}

var File_item_item_messages_proto protoreflect.FileDescriptor

var file_item_item_messages_proto_rawDesc = []byte{
	0x0a, 0x18, 0x69, 0x74, 0x65, 0x6d, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x69, 0x74, 0x65, 0x6d,
	0x22, 0x51, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x43,
	0x6f, 0x64, 0x65, 0x22, 0x6f, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x07, 0x73,
	0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69,
	0x74, 0x65, 0x6d, 0x2e, 0x53, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x49, 0x74, 0x65, 0x6d, 0x22, 0x58, 0x0a, 0x0e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x7d,
	0x0a, 0x0b, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x07, 0x73, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x41, 0x6e, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x75, 0x62, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xaa, 0x02,
	0x0a, 0x0d, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x6c, 0x69,
	0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x37, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x69, 0x6c,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0d, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x4e, 0x69, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x62, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x43, 0x0a, 0x09, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x69, 0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x22,
	0xe1, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x66, 0x0a, 0x19, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x6d, 0x61, 0x70,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x15, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x74, 0x72, 0x5f, 0x6b,
	0x65, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x61,
	0x70, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74, 0x72, 0x4b, 0x65, 0x79,
	0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x11, 0x73, 0x74, 0x72, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x1a, 0x48, 0x0a, 0x1a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x4b, 0x65, 0x79, 0x4d,
	0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x44, 0x0a,
	0x16, 0x53, 0x74, 0x72, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x6c, 0x69, 0x63,
	0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x33, 0x0a, 0x12, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x09, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a,
	0x13, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x13, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x53,
	0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a,
	0x14, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x36, 0x34, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x39, 0x0a, 0x14, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x33, 0x32, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0x30, 0x0a, 0x11, 0x42, 0x79, 0x74, 0x65, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x79, 0x74, 0x65,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x15, 0x42, 0x79, 0x74, 0x65, 0x42, 0x79, 0x74,
	0x65, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x24,
	0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x22, 0x36, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x6c,
	0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x13,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x35, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x4c, 0x0a, 0x0e, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c,
	0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73,
	0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x22, 0xb1, 0x01, 0x0a, 0x15, 0x4d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x56, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6d, 0x61, 0x70,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x40, 0x0a, 0x12, 0x4d, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xbd, 0x01, 0x0a,
	0x17, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x5e, 0x0a, 0x11, 0x6d, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x42, 0x0a, 0x14, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9b, 0x02, 0x0a,
	0x1d, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x91,
	0x01, 0x0a, 0x22, 0x6d, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x2e, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x1d, 0x6d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x1a, 0x66, 0x0a, 0x22, 0x4d, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x02, 0x0a, 0x1e, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x95, 0x01,
	0x0a, 0x23, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x73, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x1e, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x67, 0x0a, 0x23, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x54,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x94,
	0x02, 0x0a, 0x1f, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x74, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x07, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x22, 0xa2, 0x01, 0x0a, 0x2b, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x54, 0x65, 0x73,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x73, 0x0a, 0x23, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x69, 0x66,
	0x69, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x1f, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x54, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0xc1, 0x01, 0x0a, 0x0c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x6f, 0x75, 0x72, 0x74, 0x68,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66,
	0x6f, 0x75, 0x72, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x66,
	0x69, 0x66, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x66, 0x69, 0x66, 0x74, 0x68, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0xd7,
	0x01, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x68, 0x69, 0x72, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x68, 0x69, 0x72, 0x64, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x6f, 0x75, 0x72, 0x74, 0x68, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6f, 0x75, 0x72, 0x74,
	0x68, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x66, 0x74, 0x68, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x66, 0x69, 0x66,
	0x74, 0x68, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x78, 0x74, 0x68,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x69,
	0x78, 0x74, 0x68, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x77, 0x5a, 0x75, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x69, 0x65, 0x74, 0x72, 0x6f, 0x73, 0x6b, 0x69,
	0x2d, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e,
	0x79, 0x2f, 0x64, 0x65, 0x76, 0x65, 0x78, 0x2f, 0x67, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x72, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x70,
	0x6b, 0x67, 0x2f, 0x69, 0x74, 0x65, 0x6d, 0x3b, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x69, 0x74, 0x65,
	0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_item_item_messages_proto_rawDescOnce sync.Once
	file_item_item_messages_proto_rawDescData = file_item_item_messages_proto_rawDesc
)

func file_item_item_messages_proto_rawDescGZIP() []byte {
	file_item_item_messages_proto_rawDescOnce.Do(func() {
		file_item_item_messages_proto_rawDescData = protoimpl.X.CompressGZIP(file_item_item_messages_proto_rawDescData)
	})
	return file_item_item_messages_proto_rawDescData
}

var file_item_item_messages_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_item_item_messages_proto_goTypes = []any{
	(*SubItem)(nil),                                     // 0: item.SubItem
	(*Item)(nil),                                        // 1: item.Item
	(*AnotherSubItem)(nil),                              // 2: item.AnotherSubItem
	(*AnotherItem)(nil),                                 // 3: item.AnotherItem
	(*SliceTestData)(nil),                               // 4: item.SliceTestData
	(*SliceItem)(nil),                                   // 5: item.SliceItem
	(*MapTestData)(nil),                                 // 6: item.MapTestData
	(*Int64SliceTestData)(nil),                          // 7: item.Int64SliceTestData
	(*Int32SliceTestData)(nil),                          // 8: item.Int32SliceTestData
	(*Uint64SliceTestData)(nil),                         // 9: item.Uint64SliceTestData
	(*Uint32SliceTestData)(nil),                         // 10: item.Uint32SliceTestData
	(*Float64SliceTestData)(nil),                        // 11: item.Float64SliceTestData
	(*Float32SliceTestData)(nil),                        // 12: item.Float32SliceTestData
	(*ByteSliceTestData)(nil),                           // 13: item.ByteSliceTestData
	(*ByteByteSliceTestData)(nil),                       // 14: item.ByteByteSliceTestData
	(*StringSliceTestData)(nil),                         // 15: item.StringSliceTestData
	(*StructSliceTestData)(nil),                         // 16: item.StructSliceTestData
	(*StructTestData)(nil),                              // 17: item.StructTestData
	(*MapInt64Int64TestData)(nil),                       // 18: item.MapInt64Int64TestData
	(*MapStringStringTestData)(nil),                     // 19: item.MapStringStringTestData
	(*MapInt64StructPointerTestData)(nil),               // 20: item.MapInt64StructPointerTestData
	(*MapStringStructPointerTestData)(nil),              // 21: item.MapStringStructPointerTestData
	(*SimplifiedSpecialStructTestData)(nil),             // 22: item.SimplifiedSpecialStructTestData
	(*SimplifiedSpecialStructPointerSliceTestData)(nil), // 23: item.SimplifiedSpecialStructPointerSliceTestData
	(*StringStruct)(nil),                                // 24: item.StringStruct
	(*Int64Struct)(nil),                                 // 25: item.Int64Struct
	nil,                                                 // 26: item.MapTestData.Int64KeyMapInt64ValueEntry
	nil,                                                 // 27: item.MapTestData.StrKeyMapStrValueEntry
	nil,                                                 // 28: item.MapInt64Int64TestData.MapInt64Int64Entry
	nil,                                                 // 29: item.MapStringStringTestData.MapStringStringEntry
	nil,                                                 // 30: item.MapInt64StructPointerTestData.MapInt64StructPointerTestDataEntry
	nil,                                                 // 31: item.MapStringStructPointerTestData.MapStringStructPointerTestDataEntry
}
var file_item_item_messages_proto_depIdxs = []int32{
	0,  // 0: item.Item.subItem:type_name -> item.SubItem
	2,  // 1: item.AnotherItem.subItem:type_name -> item.AnotherSubItem
	5,  // 2: item.SliceTestData.struct_list:type_name -> item.SliceItem
	5,  // 3: item.SliceTestData.struct_nil_list:type_name -> item.SliceItem
	26, // 4: item.MapTestData.int64_key_map_int64_value:type_name -> item.MapTestData.Int64KeyMapInt64ValueEntry
	27, // 5: item.MapTestData.str_key_map_str_value:type_name -> item.MapTestData.StrKeyMapStrValueEntry
	17, // 6: item.StructSliceTestData.struct_list:type_name -> item.StructTestData
	28, // 7: item.MapInt64Int64TestData.map_int64_int64:type_name -> item.MapInt64Int64TestData.MapInt64Int64Entry
	29, // 8: item.MapStringStringTestData.map_string_string:type_name -> item.MapStringStringTestData.MapStringStringEntry
	30, // 9: item.MapInt64StructPointerTestData.map_int64_struct_pointer_test_data:type_name -> item.MapInt64StructPointerTestData.MapInt64StructPointerTestDataEntry
	31, // 10: item.MapStringStructPointerTestData.map_string_struct_pointer_test_data:type_name -> item.MapStringStructPointerTestData.MapStringStructPointerTestDataEntry
	22, // 11: item.SimplifiedSpecialStructPointerSliceTestData.simplified_special_struct_test_data:type_name -> item.SimplifiedSpecialStructTestData
	17, // 12: item.MapInt64StructPointerTestData.MapInt64StructPointerTestDataEntry.value:type_name -> item.StructTestData
	17, // 13: item.MapStringStructPointerTestData.MapStringStructPointerTestDataEntry.value:type_name -> item.StructTestData
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_item_item_messages_proto_init() }
func file_item_item_messages_proto_init() {
	if File_item_item_messages_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_item_item_messages_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_item_item_messages_proto_goTypes,
		DependencyIndexes: file_item_item_messages_proto_depIdxs,
		MessageInfos:      file_item_item_messages_proto_msgTypes,
	}.Build()
	File_item_item_messages_proto = out.File
	file_item_item_messages_proto_rawDesc = nil
	file_item_item_messages_proto_goTypes = nil
	file_item_item_messages_proto_depIdxs = nil
}

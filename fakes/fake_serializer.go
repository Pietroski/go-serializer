// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/pietroski-software-company/devex/golang/serializer/models (interfaces: Serializer)
//
// Generated by this command:
//
//	mockgen -package fakes -destination ../fakes/fake_serializer.go . Serializer
//

// Package fakes is a generated GoMock package.
package fakes

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSerializer is a mock of Serializer interface.
type MockSerializer struct {
	ctrl     *gomock.Controller
	recorder *MockSerializerMockRecorder
}

// MockSerializerMockRecorder is the mock recorder for MockSerializer.
type MockSerializerMockRecorder struct {
	mock *MockSerializer
}

// NewMockSerializer creates a new mock instance.
func NewMockSerializer(ctrl *gomock.Controller) *MockSerializer {
	mock := &MockSerializer{ctrl: ctrl}
	mock.recorder = &MockSerializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSerializer) EXPECT() *MockSerializerMockRecorder {
	return m.recorder
}

// DataRebind mocks base method.
func (m *MockSerializer) DataRebind(arg0, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataRebind", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DataRebind indicates an expected call of DataRebind.
func (mr *MockSerializerMockRecorder) DataRebind(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataRebind", reflect.TypeOf((*MockSerializer)(nil).DataRebind), arg0, arg1)
}

// Deserialize mocks base method.
func (m *MockSerializer) Deserialize(arg0 []byte, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deserialize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deserialize indicates an expected call of Deserialize.
func (mr *MockSerializerMockRecorder) Deserialize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deserialize", reflect.TypeOf((*MockSerializer)(nil).Deserialize), arg0, arg1)
}

// Serialize mocks base method.
func (m *MockSerializer) Serialize(arg0 any) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Serialize", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Serialize indicates an expected call of Serialize.
func (mr *MockSerializerMockRecorder) Serialize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serialize", reflect.TypeOf((*MockSerializer)(nil).Serialize), arg0)
}
